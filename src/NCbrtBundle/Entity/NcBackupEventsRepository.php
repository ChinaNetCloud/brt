<?php

namespace NCbrtBundle\Entity;

use \Doctrine\ORM\EntityRepository;

/**
 * NcBackupEventsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NcBackupEventsRepository extends EntityRepository
{
    public function findByServerBackup($parameters)
    {
        if (count($parameters['status']) == 1) {
            $dql = $this->ServerBackup($parameters);
            $query = $this->getEntityManager()->createQuery($dql);
            if (isset($parameters['size']) && $parameters['size'] != null && $parameters['size'] != '' && $parameters['size'] != 0) {
                if ($parameters['size'] >= 0) {
                    $query->setParameter('backupmethod', '%' . $parameters['backupmethod'] . '%')
                        ->setParameter('server_name', '%' . $parameters['server_name'] . '%')
                        ->setParameter('status', '%' . $parameters['status'][0] . '%')
                        ->setParameter('size', $parameters['size'])
                        ->setParameter('active', $parameters['active']);
                }
            } else {
                $query->setParameter('backupmethod', '%' . $parameters['backupmethod'] . '%')
                    ->setParameter('server_name', '%' . $parameters['server_name'] . '%')
                    ->setParameter('status', '%' . $parameters['status'][0] . '%')
                    ->setParameter('active', $parameters['active']);
            }
            return $query->getResult();
        } else {
            $result = array();
            for ($i = 0; $i < count($parameters['status']); $i++) {
                $dql = $this->ServerBackup($parameters);
                $query = $this->getEntityManager()->createQuery($dql);
                if (isset($parameters['size']) && $parameters['size'] != null && $parameters['size'] != '' && $parameters['size'] != 0) {
                    if ($parameters['size'] >= 0) {
                        $query->setParameter('backupmethod', '%' . $parameters['backupmethod'] . '%')
                            ->setParameter('server_name', '%' . $parameters['server_name'] . '%')
                            ->setParameter('status', '%' . $parameters['status'][$i] . '%')
                            ->setParameter('size', $parameters['size'])
                            ->setParameter('active', $parameters['active']);
                    }
                } else {
                    $query->setParameter('backupmethod', '%' . $parameters['backupmethod'] . '%')
                        ->setParameter('server_name', '%' . $parameters['server_name'] . '%')
                        ->setParameter('status', '%' . $parameters['status'][$i] . '%')
                        ->setParameter('active', $parameters['active']);
                }
                $result[] = $query;
            }

            if (count($result) == 2) {
                $query = array_merge($result[0]->getResult(), $result[1]->getResult());
            } else {
                $query = array_merge($result[0]->getResult(), $result[1]->getResult(), $result[2]->getResult());
            }
            return $query;
        }
    }

    public function ServerBackup($parameters)
    {
        $dql = 'SELECT n FROM NCbrtBundle:NcBackupEvents n
            JOIN n.srvrsServers s
            WHERE n.backupmethod LIKE :backupmethod
            AND s.name LIKE :server_name
            AND n.success LIKE :status
            AND s.statusActive = :active';

        if (isset($parameters['size']) && $parameters['size'] != null && $parameters['size'] != '' && $parameters['size'] != 0) {
            if ($parameters['size'] >= 0) {
                $dql .= ' AND n.backupsize ' . $parameters['comparer'] . ' :size';
                $dql .= ' ORDER BY n.dateCreated DESC';
            }
        } else {
            $dql .= ' ORDER BY n.dateCreated DESC';
        }
        return $dql;
    }

    public function findByServerTotalBackups($date_start, $date_end)
    {
        $dql = 'SELECT COUNT(n) FROM NCbrtBundle:NcBackupEvents n'
            . ' JOIN n.srvrsServers s'
            . ' WHERE n.dateCreated BETWEEN :date_start AND :date_end'
            . " AND s.statusActive = '1'";

        $query = $this->getEntityManager()->createQuery($dql);
        $query->setParameter('date_start', $date_start->format('Y-m-d h:i:s'))
            ->setParameter('date_end', $date_end->format('Y-m-d h:i:s'));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // count all events by status (success, failed, no report, other warning)
    public function findByServerTotalStatus($date_start, $date_end, $status)
    {
        $dql = 'SELECT COUNT(n) FROM NCbrtBundle:NcBackupEvents n'
            . ' JOIN n.srvrsServers s'
            . ' WHERE (n.dateCreated BETWEEN :date_start AND :date_end)'
            . ' AND n.success = :status'
            . " AND s.statusActive = '1'";

        $query = $this->getEntityManager()->createQuery($dql);
        $query->setParameter('date_start', $date_start->format('Y-m-d h:i:s'))
            ->setParameter('date_end', $date_end->format('Y-m-d h:i:s'))
            ->setParameter('status', $status);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    // count warnings not incliding no report received.
    public function findByOtherStatus($date_start, $date_end)
    {
        $dql = 'SELECT COUNT(n) FROM NCbrtBundle:NcBackupEvents n'
            . ' JOIN n.srvrsServers s'
            . ' WHERE (n.dateCreated BETWEEN :date_start AND :date_end)'
            . " AND n.success <> '0'"
            . " AND n.success <> '1'"
            . " AND n.success <> '3'"
            . " AND s.statusActive = '1'";
        $query = $this->getEntityManager()->createQuery($dql);
        $query->setParameter('date_start', $date_start->format('Y-m-d h:i:s'))
            ->setParameter('date_end', $date_end->format('Y-m-d h:i:s'));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    // find backup events by method of backing up used.
    public function findbyBackupMethod($date_start, $date_end, $method)
    {
        $dql = 'SELECT COUNT(n) FROM NCbrtBundle:NcBackupEvents n'
            . ' JOIN n.srvrsServers s'
            . ' WHERE n.dateCreated BETWEEN :date_start AND :date_end'
            . " AND s.statusActive = '1'"
            . ' AND n.backupmethod = :method';
        $query = $this->getEntityManager()->createQuery($dql);
        $query->setParameter('date_start', $date_start->format('Y-m-d h:i:s'))
            ->setParameter('date_end', $date_end->format('Y-m-d h:i:s'))
            ->setParameter('method', $method);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    // find backup events by method of backing up used.
    public function findbyBackupMethodNotStandard($date_start, $date_end)
    {
        $dql = 'SELECT COUNT(n) FROM NCbrtBundle:NcBackupEvents n'
            . ' JOIN n.srvrsServers s'
            . ' WHERE n.dateCreated BETWEEN :date_start AND :date_end'
            . " AND s.statusActive = '1'"
            . " AND n.backupmethod <> 'ncscript-py'"
            . " AND n.backupmethod <> 'ncscript'";
        $query = $this->getEntityManager()->createQuery($dql);
        $query->setParameter('date_start', $date_start->format('Y-m-d h:i:s'))
            ->setParameter('date_end', $date_end->format('Y-m-d h:i:s'));

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findServerByBackupReport()
    {
        $dql = 'SELECT s.name, s.id, MAX(n.dateCreated) latest, s.frequency
            FROM NCbrtBundle:NcBackupEvents n
            JOIN n.srvrsServers s
            WHERE s.statusActive = 1 GROUP BY s.name';
        $query = $this->getEntityManager()->createQuery($dql);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
